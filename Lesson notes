Arrow functions Chapter 9
const square = function (num) {
  return num * num
}
short hand to:
const square = (num) => num * num
const people = [
{name: Hannah, age: 46},
{name: Alan, age: 57},
{name: Joseph, age: 6}
]
const under30 = people.filter(function(person){
  return person.age < 30
})
short hand to
const under30 = people.filter((person) => person.age < 30)

Part 2
Arrow function dont' bind 'this' (eg. this.car)

Hosting
Netlify - free
Surge - free
Bluehost - $3.95/mo
HostGater - $3.95/mo

Asynchronous Javascript
========================
1) Call back
getPuzzle = (callback) => {
 const request = new XMLHttpRequest()
 request.addEventListener('readystatechange', (e) => {
 if (e.target.readyState === 4 && e.target.status === 200) {
 const data = JSON.parse(e.target.responseText)
 callback(undefined, data.puzzle)
 } else if (e.target.readyState === 4) {
 callback('An error has taken place', undefined)
 }
 })
 request.open('GET', 'http://puzzle.mead.io/puzzle?wordCount=3')
 request.send()
}

getPuzzle((error, puzzle) => {
 if (error) {
 console.log(`Error: ${error}`)
 } else {
 console.log(puzzle)
 }
})
2) closure
const createCounter = () => {
 let count = 0
 return () => {
 return count
 }
}
const counter = createCounter()
console.log(counter()) // Will print 0

const createTipper = (baseTip) => {
 return (amount) => {
 return baseTip * amount
 }
}
const tip20 = createTipper(.2)
const tip30 = createTipper(.3)
console.log(tip20(100))
console.log(tip20(80))
console.log(tip30(100))

3) Exploring promises
const myPromise = new Promise((resolve, reject) => {
 setTimeout(() => {
 resolve('Example data')
 }, 2000)
})

const getDataPromise = (num) => new Promise((resolve, reject) => {
 setTimeout(() => {
 typeof num === 'number' ? resolve(num * 2) : reject('Number must be
provided')
 }, 2000)
})

getDataPromise(10).then((data) => {
 getDataPromise(data).then((data) => {
 console.log(data) // Will print "40"
 }).catch((err) => {
 console.log(err)
 })
}).catch((err) => {
 console.log(err)
})
==> Chaining
getDataPromise(10).then((data) => {
 return getDataPromise(data)
}).then((data) => {
 console.log(data) // Will print "40"
}).catch((err) => {
 console.log(err)
})

Fetch API
FETCh('http://puzzle.mead.io/puzzle', {}).then((response) => {
 if (response.status === 200) {
 return response.json()
 } else {
 throw new Error('Unable to fetch the puzzle')
 }
}).then((data) => {
 console.log(data.puzzle)
}).catch((error) => {
 console.log(error)
})

=>Async/Await
const processData = async () => {
 return 101
}
processData().then((data) => {
 console.log(data) // Will print "101"
}).catch((error) => {
 console.log(error)
})
=> throws errior
const processData = async () => {
 throw new Error('Something went wrong!')
 return 101
}
processData().then((data) => {
 console.log(data)
}).catch((error) => {
 console.log(error) // Will print error object
})
==> await
const getPuzzle = async (wordCount) => {
 const response = await
fetch(`http://puzzle.mead.io/puzzle?wordCount=${wordCount}`)

 if (response.status === 200) {
 const data = await response.json()
 return data.puzzle
 } else {
 throw new Error('Unable to get puzzle')
 }
}
getPuzzle('2').then((puzzle) => {
 console.log(puzzle)
}).catch((err) => {
 console.log(`Error: ${err}`)
})
==> async/await
const getLocation = async () => {
    const response = await fetch('https://ipinfo.io/json?token=e0a43294879563', {})
        if (response.status === 200) {
            return await response.json()
        } else {
            throw new Error('Unable to fetch ip info')
        } 
}

Publishing
==========
fetch(`http://puzzle.mead.io/puzzle?wordCount=${wordCount}`)
fetch('https://ipinfo.io/json?token=e0a43294879563', {})
change to:
fetch(`//puzzle.mead.io/puzzle?wordCount=${wordCount}`)
fetch('//ipinfo.io/json?token=e0a43294879563', {})

UUid
====
install uuid before including the import to the index.js file
npm install uuid@3.2.1

webpack
=======
if npm run dev-server doesn't load the compiled code and the old code remains running fix it by:
adding these lines in package.json
 "watch": "webpack --watch",
 "second": "webpack-dev-server"
 first node command line type: npm run watch
 second node command window: npm run second

=======
